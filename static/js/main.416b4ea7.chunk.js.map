{"version":3,"sources":["firebase/index.js","components/Data.js","partials/Navigation.js","partials/Home.js","auth/Login.js","auth/SignUp.js","auth/Page.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Data","_handleChange","e","setState","target","name","value","_saveList","state","listName","alert","newListKey","database","ref","push","key","update","_saveCard","title","cardName","newCardKey","listKey","_handleDeleteList","dataCards","countCardOnList","i","length","console","log","_handleDeleteCard","remove","dataLists","myCardLength","_handleMoveCard","keyOfCard","moveByIndex","newKeyOfCard","moveToAnotherList","newCard","_handleChooseCard","indexOfCard","editCard","editCardName","keyCard","keyList","_handleEdit","toggle","prevState","editing","inputKey","on","snapshot","myListFromDatabase","val","lists","Object","keys","map","myCardFromDatabase","cards","CardDeck","this","list","index","filter","card","Col","sm","Card","CardHeader","Button","onClick","close","indexTask","CardBody","CardText","disabled","Modal","isOpen","className","props","ModalBody","type","onChange","ModalFooter","color","CardFooter","placeholder","Component","Navigation","userLogout","auth","signOut","Navbar","light","expand","NavbarBrand","href","Collapse","navbar","Nav","DropdownItem","React","Home","Login","_userSignIn","signInWithEmailAndPassword","email","password","catch","error","isLogined","preventDefault","Form","FormGroup","Label","Input","SignUp","_userSignUp","createUserWithEmailAndPassword","message","Page","bind","activeTab","tab","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId","Row","App","authListener","onAuthStateChanged","user","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.416b4ea7.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDptY8u9pH9oWlFgCgo5jej1oEX-aK-_rc\",\r\n    authDomain: \"getmiles-challenge-242df.firebaseapp.com\",\r\n    databaseURL: \"https://getmiles-challenge-242df.firebaseio.com\",\r\n    projectId: \"getmiles-challenge-242df\",\r\n    storageBucket: \"getmiles-challenge-242df.appspot.com\",\r\n    messagingSenderId: \"812438241735\",\r\n    appId: \"1:812438241735:web:1f65cd358bccc2851199e2\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  \r\n  export default firebase;","import React, { Component } from \"react\";\r\nimport firebase from \"../firebase/index\";\r\nimport {\r\n  CardDeck,\r\n  Col,\r\n  Card,\r\n  CardHeader,\r\n  Button,\r\n  CardBody,\r\n  CardText,\r\n  CardFooter,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter\r\n} from \"reactstrap\";\r\n\r\nclass Data extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      listName: \"\",\r\n      cardName: \"\",\r\n      editCardName: \"\",\r\n      keyCard: \"\",\r\n      keyList: \"\",\r\n      inputKey: \"\",\r\n      dataLists: [],\r\n      dataCards: [],\r\n      editing: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // console.log(firebase)\r\n    const myList = firebase.database().ref(\"lists/\");\r\n    // console.log(myList)\r\n    myList.on(\"value\", snapshot => {\r\n      const myListFromDatabase = snapshot.val();\r\n      if (myListFromDatabase === null) {\r\n        console.log(\"List at our firebase is null\");\r\n      } else {\r\n        const lists = Object.keys(snapshot.val()).map(key => {\r\n          return {\r\n            key: key,\r\n            listName: myListFromDatabase[key].listName\r\n          };\r\n        });\r\n        this.setState({\r\n          dataLists: lists\r\n        });\r\n      }\r\n    });\r\n\r\n    const myCard = firebase.database().ref(\"cards/\");\r\n    // console.log(myCard)\r\n    myCard.on(\"value\", snapshot => {\r\n      const myCardFromDatabase = snapshot.val();\r\n      // console.log(myCardFromDatabase)\r\n      if (myCardFromDatabase === null) {\r\n        console.log(\"Card at our firebase is null\");\r\n      } else {\r\n        const cards = Object.keys(snapshot.val()).map(key => {\r\n          return {\r\n            key: key,\r\n            cardName: myCardFromDatabase[key].cardName,\r\n            listKey: myCardFromDatabase[key].listKey\r\n          };\r\n        });\r\n        this.setState({\r\n          dataCards: cards\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  _handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  _saveList = () => {\r\n    if (this.state.listName === \"\") {\r\n      alert(\"List cannot be empty\");\r\n    } else {\r\n      const newListKey = firebase\r\n        .database()\r\n        .ref(\"lists/\")\r\n        .push().key;\r\n\r\n      firebase\r\n        .database()\r\n        .ref(\"lists/\")\r\n        .update({\r\n          [newListKey]: {\r\n            listName: this.state.listName\r\n          }\r\n        });\r\n      this.setState({\r\n        listName: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  _saveCard = (key, title) => {\r\n    if (this.state.cardName === \"\") {\r\n      alert(\"Card cannot be empty\");\r\n    } else {\r\n      const newCardKey = firebase\r\n        .database()\r\n        .ref(\"cards/\")\r\n        .push().key;\r\n\r\n      firebase\r\n        .database()\r\n        .ref(\"cards/\")\r\n        .update({\r\n          [newCardKey]: {\r\n            listKey: key.key,\r\n            cardName: title.title\r\n          }\r\n        });\r\n\r\n      this.setState({\r\n        cardName: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  _handleDeleteList = key => {\r\n    const { dataCards } = this.state;\r\n    // console.log(dataCards);\r\n    let countCardOnList = 0;\r\n\r\n    for (let i = 0; i < dataCards.length; i++) {\r\n      if (key === dataCards[i].listKey) {\r\n        countCardOnList++;\r\n      }\r\n    }\r\n    console.log(\"countCardOnList: \" + countCardOnList);\r\n    if (countCardOnList > 0) {\r\n      for (let i = 0; i < dataCards.length; i++) {\r\n        if (key === dataCards[i].listKey) {\r\n          this._handleDeleteCard(dataCards[i].key);\r\n        }\r\n      }\r\n    }\r\n\r\n    firebase\r\n      .database()\r\n      .ref(`lists/${key}`)\r\n      .remove();\r\n    console.log(\"Success delete List\");\r\n    const myListLength = this.state.dataLists.length;\r\n    if (myListLength === 1) {\r\n      this.setState({\r\n        dataLists: []\r\n      });\r\n    }\r\n  };\r\n\r\n  _handleDeleteCard = key => {\r\n    firebase\r\n      .database()\r\n      .ref(`cards/${key}`)\r\n      .remove();\r\n\r\n    console.log(\"Success delete Card\");\r\n    const myCardLength = this.state.dataCards.length;\r\n    console.log(myCardLength)\r\n    if (myCardLength === 1) {\r\n      this.setState({\r\n        dataCards: []\r\n      });\r\n    }\r\n  };\r\n\r\n  _handleMoveCard = (keyOfCard, moveByIndex) => {\r\n    const { dataCards, dataLists } = this.state;\r\n    // Get key from List destination movement\r\n    // console.log(keyOfCard);\r\n    const moveToAnotherList = dataLists[moveByIndex].key;\r\n    // console.log(moveToAnotherList);\r\n    let newKeyOfCard;\r\n    for (let i = 0; i < dataCards.length; i++) {\r\n      if (keyOfCard === dataCards[i].key) {\r\n        newKeyOfCard = i;\r\n      }\r\n    }\r\n\r\n    // console.log(newKeyOfCard);\r\n    const newCard = dataCards[newKeyOfCard];\r\n    // console.log(newCard);\r\n\r\n    firebase\r\n      .database()\r\n      .ref(\"cards/\")\r\n      .update({\r\n        [newCard.key]: {\r\n          listKey: moveToAnotherList,\r\n          cardName: newCard.cardName\r\n        }\r\n      });\r\n  };\r\n\r\n  _handleChooseCard = key => {\r\n    // console.log(key);\r\n    const { dataCards } = this.state;\r\n    // console.log(dataCards);\r\n    let indexOfCard;\r\n    for (let i = 0; i < dataCards.length; i++) {\r\n      if (key === dataCards[i].key) {\r\n        // console.log(dataCards[i].cardName);\r\n        indexOfCard = i;\r\n      }\r\n    }\r\n\r\n    const editCard = dataCards[indexOfCard];\r\n    // console.log(editCard.cardName);\r\n\r\n    this.setState({\r\n      editCardName: editCard.cardName,\r\n      keyCard: key,\r\n      keyList: editCard.listKey\r\n    });\r\n  };\r\n\r\n  _handleEdit = () => {\r\n    const { editCardName, keyCard, keyList } = this.state;\r\n    // console.log(editCardName);\r\n    // console.log(keyCard);\r\n\r\n    if (editCardName !== \"\") {\r\n      // console.log(\"You can edit\");\r\n\r\n      firebase\r\n        .database()\r\n        .ref(\"cards/\")\r\n        .update({\r\n          [keyCard]: {\r\n            cardName: editCardName,\r\n            listKey: keyList\r\n          }\r\n        });\r\n    } else {\r\n      // console.log(\"You can't edit\");\r\n      alert(\"Card cannot be empty\");\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState(prevState => ({\r\n      editing: !prevState.editing\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CardDeck>\r\n          {this.state.dataLists.map((list, index) => {\r\n            const cards = this.state.dataCards.filter(\r\n              card => card.listKey === list.key\r\n            );\r\n            return (\r\n              <div key={index}>\r\n                <Col sm=\"2.5\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      {list.listName}\r\n                      <Button\r\n                        onClick={() => {\r\n                          this._handleDeleteList(list.key);\r\n                        }}\r\n                        close\r\n                      /> {\" \"}\r\n                    </CardHeader>\r\n                    {cards.map((card, indexTask) => {\r\n                      return (\r\n                        <CardBody key={indexTask}>\r\n                          <div>\r\n                            <CardText>\r\n                              {card.cardName}\r\n                              <Button\r\n                                onClick={() => {\r\n                                  this._handleDeleteCard(card.key);\r\n                                }}\r\n                                close\r\n                              />\r\n                            </CardText>\r\n                            {index >= 1 ? (\r\n                              <Button\r\n                                onClick={() => {\r\n                                  this._handleMoveCard(card.key, index - 1);\r\n                                }}\r\n                              >\r\n                                Left\r\n                              </Button>\r\n                            ) : (\r\n                              <Button disabled>Left</Button>\r\n                            )}{\" \"}\r\n                            <Button \r\n                              onClick={() => {\r\n                                this._handleChooseCard(card.key);\r\n                                this.toggle();\r\n                              }}\r\n                            >\r\n                              Edit\r\n                            </Button> {\" \"}\r\n                            <Modal\r\n                              isOpen={this.state.editing}\r\n                              toggle={this.toggle}\r\n                              className={this.props.className}\r\n                            >\r\n                              <ModalBody>\r\n                                <input\r\n                                  type=\"text\"\r\n                                  name=\"editCardName\"\r\n                                  value={this.state.editCardName}\r\n                                  onChange={this._handleChange}\r\n                                />\r\n                              </ModalBody>\r\n                              <ModalFooter>\r\n                                <Button\r\n                                  onClick={() => {\r\n                                    this._handleEdit();\r\n                                    this.toggle();\r\n                                  }}\r\n                                >\r\n                                  Edit\r\n                                </Button> {\" \"}\r\n                                <Button color=\"secondary\" onClick={this.toggle}>\r\n                                  Cancel\r\n                                </Button>\r\n                              </ModalFooter>\r\n                            </Modal>\r\n                            {index < this.state.dataLists.length - 1 ? (\r\n                              <Button \r\n                                onClick={() => {\r\n                                  this._handleMoveCard(card.key, index + 1);\r\n                                }}\r\n                              >\r\n                                Right\r\n                              </Button> \r\n                            ) : (\r\n                              <Button disabled>Right</Button>\r\n                            )} {\" \"}\r\n                          </div>\r\n                        </CardBody>\r\n                      );\r\n                    })}\r\n                    <CardFooter>\r\n                      <div className=\"row\">\r\n                        <input\r\n                          type=\"text\"\r\n                          name=\"cardName\"\r\n                          placeholder=\"Add a Reward\"\r\n                          value={this.state.cardName}\r\n                          onChange={this._handleChange}\r\n                        /> {\" \"}\r\n                        <Button\r\n                          onClick={(key, title, index, e) =>\r\n                            this._saveCard(\r\n                              { key: list.key },\r\n                              { title: this.state.cardName },\r\n                              { index: list.index },\r\n                              { e }\r\n                            )\r\n                          }\r\n                        >\r\n                          Save\r\n                        </Button>{\" \"}\r\n                      </div>\r\n                    </CardFooter>\r\n                  </Card>\r\n                </Col>\r\n              </div>\r\n            );\r\n          })}\r\n          <Col sm=\"2.5\">\r\n            <Card>\r\n              <CardHeader>\r\n                <div className=\"row\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"listName\"\r\n                    placeholder=\"Add a category\"\r\n                    value={this.state.listName}\r\n                    onChange={this._handleChange}\r\n                  /> {\" \"}\r\n                  <Button onClick={() => this._saveList()}>Save</Button>{\" \"}\r\n                </div>\r\n              </CardHeader>\r\n            </Card>\r\n          </Col>\r\n        </CardDeck>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Data;\r\n","import React from \"react\";\r\nimport firebase from \"../firebase/index\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarBrand,\r\n  Nav,\r\n  DropdownItem\r\n} from \"reactstrap\";\r\n\r\nexport default class Navigation extends React.Component {\r\n\r\n  userLogout = e => {\r\n    firebase.auth().signOut();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\"><h2>Map the Rewards</h2></NavbarBrand>\r\n          <Collapse navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n            <DropdownItem onClick={this.userLogout}>Logout</DropdownItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Data from \"../components/Data\";\r\nimport Navigation from \"./Navigation\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <Navigation />\r\n        </div>\r\n        <div>\r\n          <Data />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"../firebase/index\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      isLogined: false\r\n    };\r\n  }\r\n\r\n  _userSignIn = e => {\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(this.state.email, this.state.password)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n      this.setState({isLogined:true});\r\n    e.preventDefault();\r\n  };\r\n\r\n  _handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <div className=\"container\">\r\n            <h3>Sign In</h3>\r\n            <FormGroup>\r\n              <Label>Email Address</Label>\r\n              <Input\r\n                value={this.state.email}\r\n                onChange={this._handleChange}\r\n                type=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"Email\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label>Password</Label>\r\n              <Input\r\n                value={this.state.password}\r\n                onChange={this._handleChange}\r\n                type=\"password\"\r\n                name=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </FormGroup>\r\n              <Button color=\"success\" type=\"submit\" onClick={this._userSignIn}>LOGIN</Button>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\r\nimport firebase from \"../firebase/index\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\n\r\nclass SignUp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  _userSignUp = e => {\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n      .catch(error => {\r\n        // console.log(error.message);\r\n        this.setState({\r\n          message: error.message\r\n        });\r\n      });\r\n    e.preventDefault();\r\n  };\r\n\r\n  _handleChange = e => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form>\r\n          <div className=\"container\">\r\n            <h3>Sign Up</h3>\r\n            <FormGroup>\r\n              <Label>Full Name</Label>\r\n              <Input\r\n                value={this.state.name}\r\n                onChange={this._handleChange}\r\n                type=\"text\"\r\n                name=\"name\"\r\n                placeholder=\"Full Name\"\r\n              />\r\n            </FormGroup>\r\n            <Label>Email Address</Label>\r\n            <br />\r\n            <Input\r\n              value={this.state.email}\r\n              onChange={this._handleChange}\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"Email\"\r\n            />\r\n            <br />\r\n            <Label>Password</Label>\r\n            <br />\r\n            <Input\r\n              value={this.state.password}\r\n              onChange={this._handleChange}\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n            <br />\r\n            <Button color=\"info\" type=\"submit\" onClick={this._userSignUp}>\r\n              Sign Up\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <small>{this.state.message}</small>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\nimport {\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport Login from \"./Login\";\r\nimport SignUp from \"./SignUp\";\r\n\r\nexport default class Page extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      activeTab: \"1\"\r\n    };\r\n  }\r\n\r\n  toggle(tab) {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({\r\n        activeTab: tab\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Nav tabs>\r\n          <NavItem>\r\n            <NavLink\r\n              className={classnames({ active: this.state.activeTab === \"1\" })}\r\n              onClick={() => {\r\n                this.toggle(\"1\");\r\n              }}\r\n            >\r\n              Login\r\n            </NavLink>\r\n          </NavItem>\r\n          <NavItem>\r\n            <NavLink\r\n              className={classnames({ active: this.state.activeTab === \"2\" })}\r\n              onClick={() => {\r\n                this.toggle(\"2\");\r\n              }}\r\n            >\r\n              Register\r\n            </NavLink>\r\n          </NavItem>\r\n        </Nav>\r\n        <TabContent activeTab={this.state.activeTab}>\r\n          <TabPane tabId=\"1\">\r\n            <Row>\r\n              <Col sm=\"12\">\r\n                <Login />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          <TabPane tabId=\"2\">\r\n            <Row>\r\n              <Col sm=\"12\">\r\n                <SignUp />\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n        </TabContent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Home from \"./partials/Home\";\nimport firebase from \"./firebase/index\";\nimport Page from \"./auth/Page\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {}\n    };\n    this.authListener = this.authListener.bind(this);\n  }\n\n  componentDidMount() {\n    this.authListener();\n  }\n\n  authListener = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        this.setState({ user });\n      } else {\n        this.setState({ user: null });\n      }\n    });\n  };\n  render() {\n    return <div>{this.state.user ? <Home /> : <Page />}</div>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}